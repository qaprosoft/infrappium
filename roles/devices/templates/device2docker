#!/bin/bash

DOCKER_IMAGE_ID=`docker images | grep 'qaprosoft/appium-device' | awk '{print($3)}'`
CONTAINERS=( `docker ps --format '\{\{.Names\}\}' | grep device | cut -d '-' -f 2-` )
CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
echo ACTION: $ACTION


function delete_container () {
    local udid=$1
    local container=`docker ps -a | grep $udid | sed 's/^\([a-z0-9]*\).*$/\1/g'`
#    docker stop $container || echo 'can not stop container'
    docker rm $container -f || echo 'already deleted'
}

function create_container () {
    local udid=$1
    local device_udid=`echo $1 | cut -d '-' -f 1`
    local device_name=`echo $1 | cut -d '-' -f 2`
    local device_adb_port=`echo $1 | cut -d '-' -f 3`
    local stf_min_port=`echo $1 | cut -d '-' -f 4`
    local stf_max_port=`echo $1 | cut -d '-' -f 5`
    local proxy_port=`echo $1 | cut -d '-' -f 6`
    local symlink=/dev/device-$udid
    local port=`/usr/local/bin/device2port $udid`
    docker run -d --name "device-$udid" --log-opt max-size=50m -m 1g --device=$symlink:/dev/bus/usb/003/011 --net=stage-infra_default \
	--restart always \
	--add-host {{ stf_public_host }}:{{ stf_private_host }} \
        -v /usr/lib/jvm:/usr/lib/jvm \
        -v {{ android_sdk_install_location }}:{{ android_sdk_install_location }} \
	-v {{ appium_install_location }}/node_modules/appium:/opt/appium \
	-v /opt/apk:/opt/apk \
        -v /home/build/tools/stage-infra/nginx:/opt/nginx \
        -e ANDROID_HOME={{ android_sdk_install_location }} -e DEVICENAME=$device_name -e DEVICEUDID=$device_udid \
	-e PORT=$port -e ADB_PORT=$device_adb_port -e JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre \
	-p $device_adb_port:5037 \
	-p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
	-e MIN_PORT=$stf_min_port -e MAX_PORT=$stf_max_port \
	-e STF_PRIVATE_HOST={{ stf_private_host }} -e STF_PUBLIC_HOST={{ stf_public_host }} \
	-e STF_TCP_SUB_PORT={{ stf_tcp_sub_port }} -e STF_TCP_PUB_PORT={{ stf_tcp_pub_port }} \
	-e SELENIUM_HUB_HOST={{ selenium_hub_host }} -e SELENIUM_HUB_PORT={{ selenium_hub_port }} \
	-e PROXY_PORT=$proxy_port \
        $DOCKER_IMAGE_ID || echo 'already created'
}

function update_symlink () {
    local udid=$1
    local device_path=`ls -l /dev/ | grep $udid | sed 's/^.*> \(.*\)$/\1/g'`
    if [[ $device_path != /dev* ]]
    then
        local symlink=/dev/device-$udid
        local temp_symlink=/dev/temp-$udid
        device_path=/dev/$device_path
        setfacl -m u:$USER:rw $device_path
        ln -s $device_path $temp_symlink
        mv $temp_symlink $symlink
        rm $temp_symlink
    fi
}

if [[ $ACTION = "add" ]]
then
    for device in "${CONNECTED_DEVICES[@]}"
    do
        update_symlink $device
        present=0
        for container in "${CONTAINERS[@]}"
        do
            if [[ $device = $container ]]
            then
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
            create_container $device
        fi
    done
elif [[ $ACTION = "remove" ]]
then
    sleep 5
    CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
    for container in "${CONTAINERS[@]}"
    do
	echo verifying container: $container
        present=0
        for device in "${CONNECTED_DEVICES[@]}"
        do
	    echo verifying device: $device
            if [[ $device = $container ]]
            then
		echo $device still alive
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
	    echo delete container: $container
            delete_container $container
        fi
    done
fi

exit 0
